BinaryOperator {
    left: node
    right: node
    op: token
}

FunctionCall {
    callback: node
    generic: node
    params: nodes
}

NumberLiteral {
    literal: string
}

StringLiteral {
    literal: string
}

BooleanLiteral {
    literal: string
}

NullLiteral {
    literal: string
}

VariableIdentifier {
    child: node
    name: string
}

TypeIdentifier {
    child: node
    name: string
    list: count 
}

VariableDeclaration {
    type: node
    name: node
    value: node
}

ExpressionStatement {
    expression: node
}

Block {
    statements: nodes
}

IfElseStatement {
    condition: node
    ifBlock: node
    elseBlock: node
}

WhileStatement {
    condition: node
    block: node
}

ParameterDeclaration {
    type: node
    name: node
}

FunctionDeclaration {
    name: node
    generic: node
    params: nodes
    returns: nodes
    block: node
}
